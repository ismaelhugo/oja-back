import { Injectable, Logger } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { McpService } from './mcp/mcp.service';
import OpenAI from 'openai';

interface Message {
  role: 'user' | 'assistant' | 'system' | 'tool';
  content: string;
  tool_calls?: any[];
  tool_call_id?: string;
}

@Injectable()
export class AiService {
  private readonly logger = new Logger(AiService.name);
  private openai: OpenAI | null = null;
  private model: string = 'gpt-4o-mini';

  constructor(
    @InjectDataSource() private dataSource: DataSource,
    private mcpService: McpService,
  ) {}

  async onModuleInit() {
    // Initialize OpenAI configuration
    try {
      const apiKey = process.env.OPENAI_API_KEY;
      this.model = process.env.OPENAI_MODEL || 'gpt-4o-mini';

      console.log('üîç [DEBUG] Environment variables:');
      console.log(
        '   OPENAI_API_KEY:',
        apiKey ? `${apiKey.substring(0, 20)}...` : 'NOT DEFINED',
      );
      console.log('   OPENAI_MODEL:', this.model);

      if (!apiKey) {
        throw new Error('OPENAI_API_KEY is not defined in .env');
      }

      this.openai = new OpenAI({
        apiKey: apiKey,
      });

      this.logger.log(
        `‚úÖ AI service initialized with OpenAI ${this.model} and MCP tools`,
      );
      this.logger.log('‚úÖ PostgreSQL database connection established');
      this.logger.log(
        `‚úÖ MCP Tools available: ${this.mcpService.getToolsSchema().length}`,
      );
    } catch (error) {
      this.logger.error('‚ùå Error initializing AI service:', error.message);
      this.logger.error('Stack:', error.stack);
    }
  }

  private getSystemPrompt(): string {
    const currentYear = new Date().getFullYear();

    return `Voc√™ analisa gastos de deputados federais brasileiros usando as tools dispon√≠veis.

ANO ATUAL: ${currentYear}
ANO PADR√ÉO: Use 2025 quando n√£o houver per√≠odo especificado (exceto "toda legislatura", "todos dados")

TOOLS:
${this.mcpService.getToolsDescription()}

GUIA DE USO:
1. search_deputy ‚Üí Buscar deputado por nome
2. get_deputies_by_party ‚Üí Listar deputados de um partido (extrair partido do contexto se n√£o especificado)
3. get_deputy_expenses ‚Üí Total de gastos de UM deputado
4. get_deputy_monthly_expenses ‚Üí Gastos mensais e m√©dia mensal de UM deputado
5. get_top_deputies ‚Üí Rankings (orderBy: "desc"=mais, "asc"=menos). Suporta expenseType, state, year
6. get_top_parties ‚Üí Rankings de partidos (orderBy: "desc"/"asc")
7. get_top_states ‚Üí Rankings de estados (orderBy: "desc"/"asc")
8. get_expense_types ‚Üí Ranking OU total de tipo espec√≠fico (com expenseType retorna total)
9. get_top_suppliers ‚Üí Fornecedores (sem deputyId=geral, com deputyId=espec√≠fico)
10. compare_deputies ‚Üí Comparar 2+ deputados
11. compare_parties ‚Üí Gastos de partido(s). Use para "gastos do PT", "gastos com X do partido Y", comparar 2+ partidos. Suporta expenseType
12. compare_states ‚Üí Comparar 2+ estados
13. get_statistics ‚Üí AVG/SUM/MIN/MAX (groupBy: "party"/"state"/"none", orderBy: "avg_asc"/"avg_desc"/"total_asc"/"total_desc", minDeputies para filtrar grupos pequenos)

FILTROS: year, month, day, state, expenseType, legislatura, startDate/endDate

REGRAS CR√çTICAS:
- ANO PADR√ÉO: Sem per√≠odo ‚Üí year=2025 (mencionar "em 2025" na resposta)
- Gastos de partido: "gastos do PT", "gastos com X do PT" ‚Üí compare_parties(parties: ["PT"], expenseType?, year: 2025)
- expenseType usa busca sem√¢ntica: "combust√≠vel"‚Üí"COMBUST√çVEIS E LUBRIFICANTES", "passagens a√©reas"‚Üí"PASSAGEM", "AEREA", "aluguel de carro"‚Üí"LOCA√á√ÉO OU FRETAMENTO DE VE√çCULOS"
- M√©dias: SEMPRE use get_statistics (NUNCA calcule de top 10). "menor/maior m√©dia" ‚Üí minDeputies=3
- Contexto: "deputados do partido?" ‚Üí extrair partido da conversa anterior
- Fornecedores sem deputado espec√≠fico ‚Üí SEM deputyId

FORMATA√á√ÉO:
- Portugu√™s brasileiro
- APENAS TEXTO SIMPLES - NUNCA use markdown, bold (**texto**), it√°lico, ou qualquer formata√ß√£o
- Deputado: "Nome (PARTIDO/UF)"
- Moeda: "R$ 1.234.567,89"
- SEMPRE mencionar per√≠odo usado: "em 2025", "da legislatura 57", "no per√≠odo X a Y"
- Rankings: "1¬∫ - Item: R$ valor" (um por linha)
- Lista deputados: "‚Ä¢ Nome (PARTIDO/UF)" (sem emails/fotos)
- Estat√≠sticas: incluir total deputados, gasto total, m√©dia, min, max

NUNCA: JSON bruto, inventar n√∫meros, calcular m√©dias parciais, arredondar, dizer "n√£o encontrei" se h√° dados, usar markdown ou formata√ß√£o (**bold**, *it√°lico*, etc)

Fora do escopo: "Desculpe, sou especializado apenas em an√°lise de gastos de deputados federais brasileiros."`;
  }

  async askAboutExpenses(
    question: string,
    history: Message[] = [],
  ): Promise<string> {
    try {
      if (!this.openai) {
        throw new Error(
          'AI service not initialized. Check OpenAI configuration.',
        );
      }

      this.logger.log(`Processing question: ${question}`);

      // Build messages array with system prompt and history
      const messages: any[] = [
        { role: 'system', content: this.getSystemPrompt() },
      ];

      // Add conversation history (only user/assistant messages to save tokens)
      history.forEach((msg) => {
        if (msg.role === 'user' || msg.role === 'assistant') {
          messages.push({
            role: msg.role,
            content: msg.content,
          });
        }
      });

      // Add current question
      messages.push({ role: 'user', content: question });

      // Get tools schema for function calling
      const tools = this.mcpService.getToolsSchema();

      let response = await this.openai.chat.completions.create({
        model: this.model,
        messages: messages,
        tools: tools,
        tool_choice: 'auto',
        temperature: 0,
      });

      let iterations = 0;
      const maxIterations = 10;

      // Handle tool calls loop
      while (
        response.choices[0].message.tool_calls &&
        iterations < maxIterations
      ) {
        iterations++;
        const toolCalls = response.choices[0].message.tool_calls;
        this.logger.log(`[Tool] ${toolCalls.length} call(s) requested`);

        messages.push(response.choices[0].message);

        // Execute each tool call
        for (const toolCall of toolCalls) {
          if (toolCall.type !== 'function') continue;

          const toolName = toolCall.function.name;
          const toolArgs = JSON.parse(toolCall.function.arguments);

          try {
            const result = await this.mcpService.executeTool(
              toolName,
              toolArgs,
            );

            messages.push({
              role: 'tool',
              tool_call_id: toolCall.id,
              content: JSON.stringify(result),
            });
          } catch (error) {
            this.logger.error(`[Tool] Error: ${error.message}`);
            messages.push({
              role: 'tool',
              tool_call_id: toolCall.id,
              content: JSON.stringify({ error: error.message }),
            });
          }
        }

        // Get next response
        response = await this.openai.chat.completions.create({
          model: this.model,
          messages: messages,
          tools: tools,
          tool_choice: 'auto',
          temperature: 0,
        });
      }

      const content =
        response.choices[0].message.content ||
        'Desculpe, n√£o consegui processar sua pergunta.';

      // Remove qualquer formata√ß√£o markdown das respostas
      const cleanContent = this.removeMarkdown(content);

      return cleanContent;
    } catch (error) {
      this.logger.error(`Error: ${error.message}`);
      throw error;
    }
  }

  /**
   * Remove formata√ß√£o markdown das respostas
   * Mant√©m bullets (‚Ä¢) que s√£o parte do formato esperado
   */
  private removeMarkdown(text: string): string {
    if (!text) return text;

    return (
      text
        // Remove bold (**texto** ou __texto__)
        .replace(/\*\*([^*]+)\*\*/g, '$1')
        .replace(/__([^_]+)__/g, '$1')
        // Remove it√°lico (*texto* ou _texto_) - evita remover bullets ‚Ä¢
        .replace(/\*([^*\n‚Ä¢]+)\*/g, '$1')
        .replace(/_([^_\n‚Ä¢]+)_/g, '$1')
        // Remove headers (#, ##, ###)
        .replace(/^#+\s+/gm, '')
        // Remove links [texto](url) -> texto
        .replace(/\[([^\]]+)\]\([^\)]+\)/g, '$1')
        // Remove c√≥digo inline `c√≥digo`
        .replace(/`([^`]+)`/g, '$1')
        // Remove c√≥digo em bloco ```c√≥digo```
        .replace(/```[\s\S]*?```/g, '')
        // Remove listas markdown no in√≠cio de linha (-, +)
        .replace(/^[\s]*[-+]\s+/gm, '')
        // Remove asteriscos markdown (*) no in√≠cio de linha (mas preserva bullets ‚Ä¢)
        .replace(/^\s*\*\s+/gm, (match, offset, string) => {
          // Se a pr√≥xima linha cont√©m bullet ‚Ä¢, pode ser que seja necess√°rio preservar
          // Por seguran√ßa, removemos todos os * iniciais que n√£o s√£o bullets
          return '';
        })
        // Remove numera√ß√£o markdown (1., 2., etc)
        .replace(/^\d+\.\s+/gm, '')
        // Remove m√∫ltiplas quebras de linha
        .replace(/\n{3,}/g, '\n\n')
        // Trim espa√ßos extras
        .trim()
    );
  }
}
